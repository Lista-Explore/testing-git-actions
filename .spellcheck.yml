# Create parallel jobs to process files in a given task
jobs: 4

# Contain all of the spelling tasks under the 'matrix' keyword in a list format
matrix:
# Note: Each task requires, at the very least, a name and sources to search.

# Task to spellcheck all markdown files using British English.
  - name: Markdown
    sources: '**/*.md'

    # Suppress the error that would otherwise be raised if no spelling error is found
    expect_match: false

    # Specify the use of British English from aspell
    aspell:
      lang: en
      d: en_GB

    # Specify additional words that are not covered in the default dictionaries
    dictionary:
      wordlists:
      - utils/dictionaries/en-GB-custom.txt
      output: utils/dictionaries/en-GB-custom.dic
      encoding: utf-8

    pipeline:
    - pyspelling.filters.markdown:
        markdown_extensions:
        - markdown.extensions.extra:
    - pyspelling.filters.html:
        comments: false
        attributes:
        - alt
        ignores:
        - ':matches(code, pre)'
        - 'code'
        - 'pre'
        - 'blockquote'
  

  # The Python filter is designed to find and return only content from comments and/or strings.
  - name: Python
    sources:
    - '**/*.py'
    # Suppress the error that would otherwise be raised if no spelling error is found
    expect_match: false
    aspell:
      lang: en
      d: en_GB
    dictionary:
      wordlists:
      - utils/dictionaries/en-GB-custom.txt
      output: utils/dictionaries/en-GB-custom.dic
    pipeline:
    - pyspelling.filters.python:
    - pyspelling.filters.context:
        context_visible_first: true
        escapes: \\[\\`~]
        delimiters:
        # Ignore multiline content between fences (fences can have 3 or more back ticks)
        # ```
        # content
        # ```
        - open: '(?s)^(?P<open> *`{3,})$'
          close: '^(?P=open)$'
        # Ignore text between inline back ticks
        - open: '(?P<open>`+)'
          close: '(?P=open)'


  # The HTML filter is designed to capture HTML content, comments, and even attributes.
  - name: html
    # Suppress the error that would otherwise be raised if no spelling error is found
    expect_match: false
    pipeline:
    - pyspelling.filters.html:
        comments: false
        attributes:
        - title
        - alt
        ignores:
        - :matches(code, pre)
        - a:matches(.magiclink-compare, .magiclink-commit)
        - span.keys
        - :matches(.MathJax_Preview, .md-nav__link, .md-footer-custom-text, .md-source__repository, .headerlink, .md-icon)
    sources:
    - '**/*.html'


  # The JavaScript filter is designed to find and return only content from comments and/or strings. 
  - name: javascript
    # Suppress the error that would otherwise be raised if no spelling error is found
    expect_match: false
    pipeline:
    - pyspelling.filters.javascript:
        jsdocs: true
        line_comments: true
        block_comments: true
    sources:
    - '**/*.js'


  # Text is a filter that spell checks text (.txt) files.
  # It can also be used convert from one encoding to another.
  - name: text
    # Suppress the error that would otherwise be raised if no spelling error is found
    expect_match: false
    default_encoding: cp1252
    pipeline:
    - pyspelling.filters.text:
        convert_encoding: utf-8
    source:
    - '**/*.txt'


  # The XML filter is designed to capture XML content, comments, and even attributes. 
    - name: xml
      # Suppress the error that would otherwise be raised if no spelling error is found
      expect_match: false
      pipeline:
      - pyspelling.filters.xml:
          comments: false
          attributes:
          - some-data
          ignores:
          - :matches(ignore_tag, [ignore_attribute])
      sources:
      - '**/*.xml'
